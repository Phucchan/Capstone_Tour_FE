import { Component, OnInit, OnDestroy, inject } from '@angular/core';
import { CommonModule } from '@angular/common';
import {
  FormBuilder,
  FormGroup,
  ReactiveFormsModule,
  Validators,
} from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { Observable, Subscription, of } from 'rxjs';
import { switchMap } from 'rxjs/operators';

import { TourService } from '../../../../core/services/tour.service';
import {
  TourOptionsData,
  CreateTourRequest,
  UpdateTourRequest,
  TourDetail,
} from '../../../../core/models/tour.model';

@Component({
  selector: 'app-tour-form',
  standalone: true,
  imports: [CommonModule, ReactiveFormsModule],
  templateUrl: './tour-form.component.html',
  styleUrls: ['./tour-form.component.css'],
})
export class TourFormComponent implements OnInit, OnDestroy {
  // --- Properties ---
  private fb = inject(FormBuilder);
  private router = inject(Router);
  private route = inject(ActivatedRoute);
  private tourService = inject(TourService);

  public tourForm!: FormGroup;
  public pageTitle = 'T·∫°o Tour m·ªõi';
  public isEditMode = false;
  private tourId: number | null = null;
  public tourOptions$!: Observable<TourOptionsData>;

  public durationDays = 0;
  private destinationSub!: Subscription;

  // --- Lifecycle Hooks ---
  constructor() {
    // X√¢y d·ª±ng form ·ªü constructor ƒë·ªÉ ƒë·∫£m b·∫£o form ƒë∆∞·ª£c kh·ªüi t·∫°o s·ªõm
    this.buildForm();
  }

  ngOnInit(): void {
    // L·∫•y c√°c options cho dropdowns t·ª´ service
    this.tourOptions$ = this.tourService.getTourOptions();

    // L·∫Øng nghe s·ª± thay ƒë·ªïi c·ªßa destinationLocationIds ƒë·ªÉ t·ª± ƒë·ªông t√≠nh s·ªë ng√†y
    this.destinationSub = this.tourForm
      .get('destinationLocationIds')!
      .valueChanges.subscribe((selectedIds: number[]) => {
        this.durationDays = selectedIds ? selectedIds.length : 0;
      });

    // Ki·ªÉm tra route params ƒë·ªÉ x√°c ƒë·ªãnh l√† T·∫†O M·ªöI hay C·∫¨P NH·∫¨T
    this.route.paramMap
      .pipe(
        switchMap((params) => {
          const id = params.get('id');
          if (id) {
            // --- Ch·∫ø ƒë·ªô C·∫¨P NH·∫¨T ---
            this.isEditMode = true;
            this.tourId = +id;
            this.pageTitle = 'Chi ti·∫øt & C·∫≠p nh·∫≠t Tour';
            // L·∫•y d·ªØ li·ªáu chi ti·∫øt c·ªßa tour t·ª´ service
            return this.tourService.getTourById(this.tourId);
          }
          // --- Ch·∫ø ƒë·ªô T·∫†O M·ªöI ---
          this.pageTitle = 'T·∫°o Tour M·ªõi';
          this.isEditMode = false;
          return of(null); // Tr·∫£ v·ªÅ a null observable n·∫øu kh√¥ng c√≥ id
        })
      )
      .subscribe((tourData) => {
        if (this.isEditMode && tourData) {
          // N·∫øu ·ªü ch·∫ø ƒë·ªô c·∫≠p nh·∫≠t v√† c√≥ d·ªØ li·ªáu, ƒëi·ªÅn v√†o form
          this.patchFormWithTourData(tourData);
        }
      });
  }

  ngOnDestroy(): void {
    // H·ªßy subscription ƒë·ªÉ tr√°nh r√≤ r·ªâ b·ªô nh·ªõ
    if (this.destinationSub) {
      this.destinationSub.unsubscribe();
    }
  }

  // --- Private Methods ---
  private buildForm(): void {
    // ƒê·ªãnh nghƒ©a c·∫•u tr√∫c v√† validators cho form
    this.tourForm = this.fb.group({
      name: ['', Validators.required],
      code: ['', Validators.required],
      thumbnailUrl: [''],
      description: [''],
      tourType: ['FIXED'], // M·∫∑c ƒë·ªãnh l√† FIXED cho role Business
      tourStatus: ['DRAFT'], // M·∫∑c ƒë·ªãnh l√† DRAFT khi t·∫°o m·ªõi
      departLocationId: [null, Validators.required],
      destinationLocationIds: [[], Validators.required],
      tourThemeIds: [[], Validators.required],
    });
  }

  private patchFormWithTourData(tour: TourDetail): void {
    // C·∫≠p nh·∫≠t gi√° tr·ªã cho form t·ª´ d·ªØ li·ªáu tour
    this.tourForm.patchValue({
      name: tour.name,
      code: tour.code,
      thumbnailUrl: tour.thumbnailUrl,
      description: tour.description,
      tourType: tour.tourType,
      tourStatus: tour.tourStatus,
      departLocationId: tour.departLocation.id,
      // map ƒë·ªÉ l·∫•y ra m·∫£ng c√°c id
      destinationLocationIds: tour.destinations.map((d) => d.id),
      tourThemeIds: tour.themes.map((t) => t.id),
    });

    // Kh√¥ng cho ph√©p ch·ªânh s·ª≠a m√£ tour
    this.tourForm.get('code')?.disable();
  }

  // --- Public Methods (Handlers) ---
  public onSubmit(): void {
    if (this.tourForm.invalid) {
      this.tourForm.markAllAsTouched(); // Hi·ªÉn th·ªã l·ªói validation n·∫øu form kh√¥ng h·ª£p l·ªá
      console.warn('Form is invalid!');
      return;
    }

    // L·∫•y d·ªØ li·ªáu t·ª´ form, bao g·ªìm c·∫£ c√°c tr∆∞·ªùng b·ªã disable (nh∆∞ 'code')
    const formValue = this.tourForm.getRawValue();

    if (this.isEditMode && this.tourId) {
      // --- X·ª≠ l√Ω C·∫¨P NH·∫¨T ---
      const updateData: UpdateTourRequest = formValue;
      this.tourService.updateTour(this.tourId, updateData).subscribe({
        next: () => {
          alert('C·∫≠p nh·∫≠t tour th√†nh c√¥ng! ‚úÖ');
          this.router.navigate(['/business/tours']);
        },
        error: (err) => {
          console.error('L·ªói khi c·∫≠p nh·∫≠t tour:', err);
          alert(err.error?.message || 'C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i.');
        },
      });
    } else {
      // --- X·ª≠ l√Ω T·∫†O M·ªöI ---
      const createData: CreateTourRequest = formValue;
      this.tourService.createTour(createData).subscribe({
        next: () => {
          alert('T·∫°o tour th√†nh c√¥ng! üéâ');
          this.router.navigate(['/business/tours']);
        },
        error: (err) => {
          console.error('L·ªói khi t·∫°o tour:', err);
          alert(err.error?.message || 'C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i.');
        },
      });
    }
  }

  public goBack(): void {
    this.router.navigate(['/business/tours']);
  }
}
