import { Component } from '@angular/core';
import { Router, RouterModule } from '@angular/router';
import { FormBuilder } from '@angular/forms';
import { SpinnerComponent } from '../../../../shared/components/spinner/spinner.component';
import { PlanService } from '../../services/plan.service';
import { FormatDatePipe } from '../../../../shared/pipes/format-date.pipe';
import { CommonModule } from '@angular/common';
import { TimePipe } from '../../../../shared/pipes/time.pipe';
import { CurrencyPipe } from '../../../../shared/pipes/currency.pipe';
import { tr } from 'date-fns/locale';
import { NgxChartsModule } from '@swimlane/ngx-charts';

enum ScaleType {
  Time = 'time',
  Linear = 'linear',
  Ordinal = 'ordinal',
  Quantile = 'quantile',
}

interface Color {
  name: string;
  selectable: boolean;
  group: ScaleType;
  domain: string[];
}

interface ChartDataPoint {
  name: string;
  value: number;
}

@Component({
  selector: 'app-plan-detail',
  imports: [
    SpinnerComponent,
    RouterModule,
    FormatDatePipe,
    CommonModule,
    TimePipe,
    CurrencyPipe,
    NgxChartsModule,
  ],
  templateUrl: './plan-detail.component.html',
  styleUrl: './plan-detail.component.css',
})
export class PlanPreviewComponent {
  isLoading: boolean = false;

  constructor(
    private planService: PlanService,
    private fb: FormBuilder,
    private router: Router
  ) {}

  plan: any = '';

  planContent: any;

  restaurants: any[] = [];
  hotels: any[] = [];
  activities: any[] = [];

  locations: any[] = [];

  selectedDay: any = null;

  chartColorScheme: Color = {
    name: 'travel-futuristic',
    selectable: true,
    group: ScaleType.Ordinal,
    domain: [
      '#374F43',
      '#25344F',
      '#617891',
      '#D5B893',
      '#6F4D38',
      '#632024',
      '#44576D',
      '#768A96',
      '#AAC7D8',
    ],
  };

  xAxisLabelUsers = 'Ng√†y';
  yAxisLabelUsers = 'Chi ph√≠';
  showXAxis = true;
  showYAxis = true;
  gradient = false;
  showLegend = true;
  doughnut = true;
  showXAxisLabel = true;
  showYAxisLabel = true;
  newUserChartView: [number, number] = [500, 300];

  dayTotals: Array<{ name: string; value: number }> = [];

  tourTypeChartView: [number, number] = [500, 300];

  tourTypeChartData: Array<{ name: string; value: number }> = [];
  private totalValue = 0;

  formatPercentage(value: any): string {
    if (typeof value === 'number') {
      return `${value.toFixed(1)}%`; // Format percentage with 1 decimal place
    }
    return value?.toString() ?? '';
  }

  onChartSelect(event: any): void {
    console.log('Chart item selected:', event);
  }

  step = 0;

  nextStep() {
    this.step++;
    console.log('Current step:', this.step);
    if (this.step <= this.plan?.days.length) {
      this.selectedDay = this.plan.days[this.step - 1];
      this.fullText = this.selectedDay.longDescription;
    }

    if (this.step == this.plan?.days.length + 1) {
      this.fullText =
        'üê§ H√†nh tr√¨nh ƒë∆∞·ª£c thi·∫øt k·∫ø v·ªõi s·ª± k·∫øt h·ª£p gi·ªØa m√°y bay cho c√°c ch·∫∑ng d√†i v√† √¥ t√¥/xe thu√™ cho qu√£ng ƒë∆∞·ªùng ng·∫Øn, ƒë·∫£m b·∫£o v·ª´a ti·∫øt ki·ªám th·ªùi gian v·ª´a linh ho·∫°t kh√°m ph√°. Chi ph√≠ di chuy·ªÉn bao g·ªìm v√© m√°y bay kh·ª© h·ªìi v√† thu√™ xe tr·ªçn g√≥i';
    }

    if (this.step == this.plan?.days.length + 2) {
      this.fullText =
        'üê§ Cu·ªëi c√πng, m√¨nh xin g·ª≠i ƒë·∫øn b·∫°n ph·∫ßn ph√¢n t√≠ch chi ph√≠ cho to√†n b·ªô chuy·∫øn ƒëi. Ch√∫c b·∫°n s·∫Ω c√≥ m·ªôt chuy·ªÉn ƒëi vui v·∫ª v√† tr·ªçn v·∫πn. ';
    }

    this.displayedText = '';
    this.index = 0;
    this.typeNextCharacter();
  }

  previousStep() {
    if (this.step > 0) {
      this.step--;
      console.log('Current step:', this.step);
      this.selectedDay = this.plan.days[this.step - 1];
      if (this.step == 0) {
        this.fullText =
          'üê§ T·ªõ l√† h∆∞·ªõng d·∫´n vi√™n ƒë·∫∑c bi·ªát c·ªßa b·∫°n h√¥m nay. T·ªõ s·∫Ω ƒë·ªìng h√†nh c√πng b·∫°n trong su·ªët chuy·∫øn ƒëi n√†y, k·ªÉ cho b·∫°n nghe t·ª´ng c√¢u chuy·ªán th√∫ v·ªã ·ªü m·ªói ƒëi·ªÉm ƒë·∫øn. C√πng t·ªõ kh√°m ph√° c√°c ƒë·ªãa ƒëi·ªÉm h·∫•p d·∫´n, th∆∞·ªüng th·ª©c m√≥n ƒÉn ngon, v√† t·∫°o n√™n nh·ªØng k·ª∑ ni·ªám tuy·ªát v·ªùi nh√©! üß≥‚ú®';
      } else this.fullText = this.selectedDay.longDescription;
      this.displayedText = this.fullText;
      this.index = 0;
    }
  }

  ngOnInit() {
    const planId = this.router.url.split('/').pop();

    console.log(planId);

    if (planId) {
      this.getPlanById(planId);
    }
  }

  savePlan() {
    this.isLoading = true;
    this.planService.savePlan(this.plan?.id).subscribe({
      next: (response) => {
        console.log('Plan saved successfully:', response);
        this.isLoading = false;
        //this.router.navigate(['/customer/plan-detail', this.plan.id]);
      },
      error: (error) => {
        console.error('Error saving plan:', error);
        this.isLoading = false;
      }
    });
  }

  private computeTotals(plan: any) {
    const acc = { restaurants: 0, hotels: 0, activities: 0 };
    if (!plan?.days?.length) return acc;

    for (const d of plan.days) {
      acc.restaurants += (d.restaurants ?? []).reduce(
        (s: any, r: any) => s + (r.estimatedCost ?? 0),
        0
      );
      acc.hotels += (d.hotels ?? []).reduce(
        (s: any, h: any) => s + (h.estimatedCost ?? 0),
        0
      );
      acc.activities += (d.activities ?? []).reduce(
        (s: any, a: any) => s + (a.estimatedCost ?? 0),
        0
      );
    }

    return acc;
  }

  // Hi·ªÉn th·ªã nh√£n quanh l√°t c·∫Øt (ch·ªâ t√™n)
  formatLabel = (label: string): string => label;
  totals: any;

  getPlanById(planId: any) {
    this.isLoading = true;
    this.planService.getPlanById(planId).subscribe({
      next: (response) => {
        this.plan = response.data;

        console.log('Plan data:', this.plan);

        this.restaurants = Array.from(
          new Map(
            this.plan.days
              .flatMap((dayObj: any) => dayObj.restaurants || [])
              .map((rest: any) => [rest.name, rest]) // d√πng name l√†m key
          ).values()
        );

        console.log('Restaurants (unique):', this.restaurants);

        this.hotels = Array.from(
          new Map(
            this.plan.days
              .flatMap((dayObj: any) => dayObj.hotels || [])
              .map((rest: any) => [rest.name, rest]) // d√πng name l√†m key
          ).values()
        );

        console.log('Hotels (unique):', this.hotels);

        console.log('hotels (unique):', this.hotels);

        this.activities = this.plan.days.flatMap(
          (dayObj: any) => dayObj.activities || []
        );

        this.locations = this.plan.days.map(
          (dayObj: any) => dayObj.locationName
        );

        console.log('All activities:', this.activities);
        console.log('All locations:', this.locations);

        this.selectedDay = this.plan.days[0];

        this.totals = this.computeTotals(this.plan);

        this.tourTypeChartData = [
          { name: 'Nh√† h√†ng', value: this.totals.restaurants },
          { name: 'Kh√°ch s·∫°n', value: this.totals.hotels },
          { name: 'Ho·∫°t ƒë·ªông', value: this.totals.activities },
        ];

        this.dayTotals = this.plan.days.map((d: any, idx: any) => {
          const total =
            (d.restaurants ?? []).reduce(
              (s: any, r: any) => s + (r.estimatedCost ?? 0),
              0
            ) +
            (d.hotels ?? []).reduce(
              (s: any, h: any) => s + (h.estimatedCost ?? 0),
              0
            ) +
            (d.activities ?? []).reduce(
              (s: any, a: any) => s + (a.estimatedCost ?? 0),
              0
            );

          return {
            name: `Ng√†y ${idx + 1}`,
            value: total,
          };
        });

        this.isLoading = false;
      },
      error: (error) => {
        console.error('Error fetching plan', error);
      },
    });
  }

  fullText =
    'üê§ T·ªõ l√† h∆∞·ªõng d·∫´n vi√™n ƒë·∫∑c bi·ªát c·ªßa b·∫°n h√¥m nay. T·ªõ s·∫Ω ƒë·ªìng h√†nh c√πng b·∫°n trong su·ªët chuy·∫øn ƒëi n√†y, k·ªÉ cho b·∫°n nghe t·ª´ng c√¢u chuy·ªán th√∫ v·ªã ·ªü m·ªói ƒëi·ªÉm ƒë·∫øn. C√πng t·ªõ kh√°m ph√° c√°c ƒë·ªãa ƒëi·ªÉm h·∫•p d·∫´n, th∆∞·ªüng th·ª©c m√≥n ƒÉn ngon, v√† t·∫°o n√™n nh·ªØng k·ª∑ ni·ªám tuy·ªát v·ªùi nh√©! üß≥‚ú®';
  displayedText = '';
  index = 0;

  ngAfterViewInit() {
    this.typeNextCharacter();
  }

  typeNextCharacter() {
    if (this.index < this.fullText.length) {
      this.displayedText += this.fullText.charAt(this.index);
      this.index++;
      setTimeout(() => this.typeNextCharacter(), 15); // t·ªëc ƒë·ªô g√µ
    }
  }
}
